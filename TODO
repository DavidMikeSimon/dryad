- Allow optional use of a development mode which:
  - Makes sure all attribute keys are valid in XML
  - Makes sure all tags are valid in XML
  - In the HTML taglib, checks attributes for tag-specific validity
  - Flags attempts to use tag return values with helpful error messages
  - Flags useless defs (i.e. like in custom_tag_tests.rb test_indef_redef_with_run sans the run)
  - Flags dangerous permanent redefs (i.e. like in custom_tag_tests.rb test_inblock_redef_with_run sans the run)
  - Flags attempts to use puts
  - Flags attempts to call tag methods within a running block; that wouldn't do anything useful
  - Applies NearMissSuggestions to regular method_missing (so, remove this from the regular dryad.rb where it is now)
  - Makes sure output is not written during running block (also needs to be removed from regular dryad.rb where it is
    now)
  - Freezes AttributesHash after setup (again move from current dryad.rb)
  - Warns if 'content' method is given a non-bang-ending symbol
  - Does not cause a performance hit if not in use (use monkey-patches, not lots of ifs)
  - Does auto-indentation of output
    - Replace newlines with HTML newline entities
    - Watch out for tags like <pre>
- Add methods like dryml's before, after, prepend, append stuff
  - Have some sort of general-purpose matching system for this, detecting tag name, class, id, parent, etc.
  - Maybe based on a subset of CSS selector syntax?
- Polymorphic tag definitions (different definitions at the same layer that apply depending upon argument type)
  - Given a plain ol' value, is there some way to tell where it came from, i.e. some column of some model?
- Instance variables
  - Possibly frozen in subcontexts so that I don't have to worry about cloning
  - Er, can one freeze a "view" of an object but leave the original mutable?
  - And anyways, it seems like freezing something (i.e. an array) doesn't prevent its contents from being changed
- Test that one tag-defining module can depend on another, and that including the base manually after that won't
  overwrite the child definitions
- Use rails html safety mechanism in the v tag
- *Prevent* access to regular ActionView helpers (form_for, link_to, etc.), maybe allow access to them through a
  mediated facility.

- In Context should probably rename 'running' to 'oneoff', and 'run' to something like 'oneoff_block'
  - This is handy because it implies that it's like defining a child tag, but without having to seperate def and call,
    which is just the idiom I'm going for
  - Alternately maybe 'custom' and 'custom_block'

- Adopt something like DRYML's implicit context 'this', and also 'this_field', for:
  - Eventual backwards compatibility measures
  - Polymorphism target
  - Ability to see the parent of this
  - Convenience of not having to respecify stuff to be pushed down
  - Note: DRYML does not have magic field recognition, can *I* have magic field recognition please?
    - Then I wouldn't have to duplicate DRYML's "field=" stuff.
    - Maybe will have to rely on having a list of fields, and install wrappers on those methods
      - Watch out for custom fields, i.e. "def name first_name + last_name end"
      - Maybe this can be handled with viewhints? Tagged methods = columns U hinted fields
      - Ack, cannot put instance methods on fixnums.
      - Hm, have to make sure the wrappers aren't ridiculously slow. How to only wrap methods called from the view?
